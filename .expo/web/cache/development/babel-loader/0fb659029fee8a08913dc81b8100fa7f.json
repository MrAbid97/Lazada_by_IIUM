{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/ash/Desktop/bro_app/screens/StartupScreen.js\";\nimport React, { useEffect } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch } from 'react-redux';\nimport Colors from \"../constants/Colors\";\nimport * as authActions from \"../store/actions/auth\";\n\nvar StartupScreen = function StartupScreen(props) {\n  var dispatch = useDispatch();\n  useEffect(function () {\n    var tryLogin = function tryLogin() {\n      var userData, transformedData, token, userId, expiryDate, expirationDate, expirationTime;\n      return _regeneratorRuntime.async(function tryLogin$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('userData'));\n\n            case 2:\n              userData = _context.sent;\n\n              if (userData) {\n                _context.next = 6;\n                break;\n              }\n\n              dispatch(authActions.setDidTryAutoLogin());\n              return _context.abrupt(\"return\");\n\n            case 6:\n              transformedData = JSON.parse(userData);\n              token = transformedData.token, userId = transformedData.userId, expiryDate = transformedData.expiryDate;\n              expirationDate = new Date(expiryDate);\n\n              if (!(expirationDate <= new Date() || !token || !userId)) {\n                _context.next = 12;\n                break;\n              }\n\n              dispatch(authActions.setDidTryAutoLogin());\n              return _context.abrupt(\"return\");\n\n            case 12:\n              expirationTime = expirationDate.getTime() - new Date().getTime();\n              dispatch(authActions.authenticate(userId, token, expirationTime));\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    tryLogin();\n  }, [dispatch]);\n  return React.createElement(View, {\n    style: styles.screen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: Colors.primary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default StartupScreen;","map":{"version":3,"sources":["/home/ash/Desktop/bro_app/screens/StartupScreen.js"],"names":["React","useEffect","useDispatch","Colors","authActions","StartupScreen","props","dispatch","tryLogin","AsyncStorage","getItem","userData","setDidTryAutoLogin","transformedData","JSON","parse","token","userId","expiryDate","expirationDate","Date","expirationTime","getTime","authenticate","styles","screen","primary","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;;AAGA,SAAQC,WAAR,QAA0B,aAA1B;AAEA,OAAOC,MAAP;AACA,OAAO,KAAKC,WAAZ;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAE3B,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMO,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACUC,YAAY,CAACC,OAAb,CAAqB,UAArB,CADV;;AAAA;AACPC,cAAAA,QADO;;AAAA,kBAERA,QAFQ;AAAA;AAAA;AAAA;;AAITJ,cAAAA,QAAQ,CAACH,WAAW,CAACQ,kBAAZ,EAAD,CAAR;AAJS;;AAAA;AAOPC,cAAAA,eAPO,GAOWC,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAPX;AAQNK,cAAAA,KARM,GAQuBH,eARvB,CAQNG,KARM,EAQCC,MARD,GAQuBJ,eARvB,CAQCI,MARD,EAQSC,UART,GAQuBL,eARvB,CAQSK,UART;AASPC,cAAAA,cATO,GASU,IAAIC,IAAJ,CAASF,UAAT,CATV;;AAAA,oBAWTC,cAAc,IAAI,IAAIC,IAAJ,EAAlB,IAAgC,CAACJ,KAAjC,IAA0C,CAACC,MAXlC;AAAA;AAAA;AAAA;;AAYTV,cAAAA,QAAQ,CAACH,WAAW,CAACQ,kBAAZ,EAAD,CAAR;AAZS;;AAAA;AAiBPS,cAAAA,cAjBO,GAiBUF,cAAc,CAACG,OAAf,KAA2B,IAAIF,IAAJ,GAAWE,OAAX,EAjBrC;AAoBbf,cAAAA,QAAQ,CAACH,WAAW,CAACmB,YAAZ,CAAyBN,MAAzB,EAAiCD,KAAjC,EAAwCK,cAAxC,CAAD,CAAR;;AApBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAuBAb,IAAAA,QAAQ;AACX,GAzBQ,EAyBN,CAACD,QAAD,CAzBM,CAAT;AA4BA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEiB,MAAM,CAACC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAEtB,MAAM,CAACuB,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CArCD;;AAwCA,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,MAAM,EAAE;AACJI,IAAAA,IAAI,EAAE,CADF;AAEJC,IAAAA,cAAc,EAAE,QAFZ;AAGJC,IAAAA,UAAU,EAAE;AAHR;AADqB,CAAlB,CAAf;AAQA,eAAe1B,aAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {ActivityIndicator, AsyncStorage, StyleSheet, View} from 'react-native';\r\n\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport Colors from '../constants/Colors';\r\nimport * as authActions from '../store/actions/auth';\r\n\r\nconst StartupScreen = props => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const tryLogin = async () => {\r\n            const userData = await AsyncStorage.getItem('userData');\r\n            if (!userData) {\r\n                // props.navigation.navigate('Auth');\r\n                dispatch(authActions.setDidTryAutoLogin());\r\n                return;\r\n            }\r\n            const transformedData = JSON.parse(userData);\r\n            const {token, userId, expiryDate} = transformedData;\r\n            const expirationDate = new Date(expiryDate);\r\n\r\n            if (expirationDate <= new Date() || !token || !userId) {\r\n                dispatch(authActions.setDidTryAutoLogin());\r\n                // props.navigation.navigate('Auth');\r\n                return;\r\n            }\r\n\r\n            const expirationTime = expirationDate.getTime() - new Date().getTime();\r\n\r\n            // props.navigation.navigate('Shop');\r\n            dispatch(authActions.authenticate(userId, token, expirationTime));\r\n        };\r\n\r\n        tryLogin();\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <View style={styles.screen}>\r\n            <ActivityIndicator size=\"large\" color={Colors.primary}/>\r\n        </View>\r\n    );\r\n};\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n});\r\n\r\nexport default StartupScreen;\r\n"]},"metadata":{},"sourceType":"module"}