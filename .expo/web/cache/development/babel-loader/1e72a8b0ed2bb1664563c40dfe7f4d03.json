{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/ash/Desktop/bro_app/screens/shop/CartScreen.js\";\nimport React, { useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Colors from \"../../constants/Colors\";\nimport CartItem from \"../../components/shop/CartItem\";\nimport * as cartActions from \"../../store/actions/cart\";\nimport * as ordersActions from \"../../store/actions/orders\";\nimport Card from \"../../components/UI/Card\";\n\nvar CartScreen = function CartScreen(props) {\n  var token = useSelector(function (state) {\n    return state.auth.token;\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _React$useState = React.useState('Address'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      address = _React$useState2[0],\n      setAddress = _React$useState2[1];\n\n  fetch('https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyD480eQzY9RTRTmRSTBhSKYqQlmhmEJBKM', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      idToken: token\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    var data = response['users'][0];\n\n    if (data.photoUrl) {\n      setAddress(data.photoUrl);\n    } else {\n      setAddress(\"No Address\");\n    }\n  });\n  var cartTotalAmount = useSelector(function (state) {\n    return state.cart.totalAmount;\n  });\n  var cartItems = useSelector(function (state) {\n    var transformedCartItems = [];\n\n    for (var key in state.cart.items) {\n      transformedCartItems.push({\n        productId: key,\n        productTitle: state.cart.items[key].productTitle,\n        productPrice: state.cart.items[key].productPrice,\n        quantity: state.cart.items[key].quantity,\n        sum: state.cart.items[key].sum\n      });\n    }\n\n    return transformedCartItems.sort(function (a, b) {\n      return a.productId > b.productId ? 1 : -1;\n    });\n  });\n  var dispatch = useDispatch();\n\n  var sendOrderHandler = function sendOrderHandler() {\n    return _regeneratorRuntime.async(function sendOrderHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dispatch(ordersActions.addOrder(cartItems, cartTotalAmount)));\n\n          case 3:\n            setIsLoading(false);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Address\"), React.createElement(Card, {\n    style: styles.summary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.summaryText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, address)), React.createElement(Card, {\n    style: styles.summary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.summaryText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"Total: \", React.createElement(Text, {\n    style: styles.amount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 28\n    }\n  }, \" RM \", Math.round(cartTotalAmount.toFixed(2) * 100) / 100 - 7, \" \"), '\\n', \"Ship : \", React.createElement(Text, {\n    style: styles.amount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 28\n    }\n  }, \" RM \", cartTotalAmount > 7 ? 7 : 0), '\\n', \"Final: \", React.createElement(Text, {\n    style: styles.amount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 28\n    }\n  }, \" RM \", cartTotalAmount > 7 ? Math.round(cartTotalAmount.toFixed(2) * 100) / 100 : 0, \" \")), isLoading ? React.createElement(ActivityIndicator, {\n    size: \"small\",\n    color: Colors.primary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }) : React.createElement(Button, {\n    color: Colors.accent,\n    title: \"Order Now\",\n    disabled: cartItems.length === 0,\n    onPress: sendOrderHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  })), React.createElement(FlatList, {\n    data: cartItems,\n    keyExtractor: function keyExtractor(item) {\n      return item.productId;\n    },\n    renderItem: function renderItem(itemData) {\n      return React.createElement(CartItem, {\n        quantity: itemData.item.quantity,\n        title: itemData.item.productTitle,\n        amount: itemData.item.sum,\n        deletable: true,\n        onRemove: function onRemove() {\n          dispatch(cartActions.removeFromCart(itemData.item.productId));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport var screenOptions = function screenOptions(navData) {\n  return {\n    headerTitle: 'Cart'\n  };\n};\nvar styles = StyleSheet.create({\n  screen: {\n    margin: 20\n  },\n  summary: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n    padding: 10\n  },\n  summaryText: {\n    fontFamily: 'open-sans-bold',\n    fontSize: 18\n  },\n  amount: {\n    color: Colors.primary\n  }\n});\nexport default CartScreen;","map":{"version":3,"sources":["/home/ash/Desktop/bro_app/screens/shop/CartScreen.js"],"names":["React","useState","useDispatch","useSelector","Colors","CartItem","cartActions","ordersActions","Card","CartScreen","props","token","state","auth","isLoading","setIsLoading","address","setAddress","fetch","method","headers","body","JSON","stringify","idToken","then","response","json","data","photoUrl","cartTotalAmount","cart","totalAmount","cartItems","transformedCartItems","key","items","push","productId","productTitle","productPrice","quantity","sum","sort","a","b","dispatch","sendOrderHandler","addOrder","styles","screen","summary","summaryText","amount","Math","round","toFixed","primary","accent","length","item","itemData","removeFromCart","screenOptions","navData","headerTitle","StyleSheet","create","margin","flexDirection","alignItems","justifyContent","marginBottom","padding","fontFamily","fontSize","color"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {ActivityIndicator, Button, FlatList, StyleSheet, Text, View} from 'react-native';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport Colors from '../../constants/Colors';\r\nimport CartItem from '../../components/shop/CartItem';\r\n\r\nimport * as cartActions from '../../store/actions/cart';\r\nimport * as ordersActions from '../../store/actions/orders';\r\nimport Card from '../../components/UI/Card';\r\n\r\nconst CartScreen = (props) => {\r\n    const token = useSelector(state => state.auth.token);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    let [address, setAddress] = React.useState('Address');\r\n\r\n\r\n    // Fetching Address every time user open cart (Always get the latest one)\r\n    fetch('https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyD480eQzY9RTRTmRSTBhSKYqQlmhmEJBKM', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({idToken: token})\r\n    }).then(response => response.json())\r\n        .then(response => {\r\n            const data = response['users'][0];\r\n            if (data.photoUrl) {\r\n                setAddress(data.photoUrl);\r\n            } else {\r\n                setAddress(\"No Address\");\r\n            }\r\n        })\r\n    // Get cart total amount\r\n    const cartTotalAmount = useSelector(state => state.cart.totalAmount);\r\n    // Get Cart Items\r\n    const cartItems = useSelector(state => {\r\n        const transformedCartItems = [];\r\n        for (const key in state.cart.items) {\r\n            transformedCartItems.push({\r\n                productId: key,\r\n                productTitle: state.cart.items[key].productTitle,\r\n                productPrice: state.cart.items[key].productPrice,\r\n                quantity: state.cart.items[key].quantity,\r\n                sum: state.cart.items[key].sum\r\n            });\r\n        }\r\n        return transformedCartItems.sort((a, b) => a.productId > b.productId ? 1 : -1);\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // handle order\r\n    const sendOrderHandler = async () => {\r\n        setIsLoading(true);\r\n        await dispatch(ordersActions.addOrder(cartItems, cartTotalAmount));\r\n        setIsLoading(false);\r\n    }\r\n\r\n    return (\r\n        <View style={styles.screen}>\r\n            <Text>Address</Text>\r\n            <Card style={styles.summary}>\r\n                <Text style={styles.summaryText}>{address}</Text>\r\n            </Card>\r\n            <Card style={styles.summary}>\r\n                <Text style={styles.summaryText}>\r\n                    {/* We already added 7 RM to cart so we display -7  */}\r\n                    Total: <Text\r\n                    style={styles.amount}> RM {(Math.round(cartTotalAmount.toFixed(2) * 100) / 100) - 7} </Text>\r\n                    {'\\n'}\r\n                    {/* We already added 7 RM to cart so we display -7  */}\r\n                    Ship : <Text\r\n                    style={styles.amount}> RM {cartTotalAmount > 7 ? 7 : 0}</Text>\r\n                    {'\\n'}\r\n                    Final: <Text\r\n                    style={styles.amount}> RM {cartTotalAmount > 7 ? (Math.round(cartTotalAmount.toFixed(2) * 100) / 100) : 0} </Text>\r\n                </Text>\r\n                {isLoading ? (\r\n                    <ActivityIndicator size=\"small\" color={Colors.primary}/>\r\n                ) : (\r\n                    <Button\r\n                        color={Colors.accent}\r\n                        title=\"Order Now\"\r\n                        disabled={cartItems.length === 0}\r\n                        onPress={sendOrderHandler}\r\n                    />\r\n                )}\r\n            </Card>\r\n            <FlatList\r\n                data={cartItems}\r\n                keyExtractor={item => item.productId}\r\n                renderItem={itemData => (\r\n                    <CartItem\r\n                        quantity={itemData.item.quantity}\r\n                        title={itemData.item.productTitle}\r\n                        amount={itemData.item.sum}\r\n                        deletable={true}\r\n                        onRemove={() => {\r\n                            dispatch(cartActions.removeFromCart(itemData.item.productId));\r\n                        }}\r\n                    />\r\n                )}\r\n            />\r\n\r\n        </View>\r\n\r\n    );\r\n}\r\n\r\nexport const screenOptions = (navData) => {\r\n    return {\r\n        headerTitle: 'Cart'\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n\r\n        margin: 20,\r\n\r\n    },\r\n    summary: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        marginBottom: 20,\r\n        padding: 10,\r\n    },\r\n    summaryText: {\r\n        fontFamily: 'open-sans-bold',\r\n        fontSize: 18\r\n    },\r\n    amount: {\r\n        color: Colors.primary\r\n\r\n    },\r\n});\r\n\r\nexport default CartScreen;\r\n"]},"metadata":{},"sourceType":"module"}