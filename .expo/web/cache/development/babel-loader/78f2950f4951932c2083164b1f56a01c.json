{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nexport var SIGNUP = 'SIGNUP';\nexport var LOGIN = 'LOGIN';\nexport var AUTHENTICATE = 'AUTHENTICATE';\nexport var LOGOUT = 'LOGOUT';\nexport var SET_DID_TRY_AUTO_LOGIN = 'SET_DID_TRY_AUTO_LOGIN';\nvar timer;\nexport var setDidTryAutoLogin = function setDidTryAutoLogin() {\n  return {\n    type: SET_DID_TRY_AUTO_LOGIN\n  };\n};\nexport var authenticate = function authenticate(userId, token, expiryTime) {\n  return function (dispatch) {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token\n    });\n  };\n};\nexport var signup = function signup(email, password) {\n  return function _callee(dispatch) {\n    var response, errorResData, errorId, message, resData, user_response, res_user_data, expirationDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyD480eQzY9RTRTmRSTBhSKYqQlmhmEJBKM', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong!';\n\n            if (errorId === 'EMAIL_EXISTS') {\n              message = 'This email already exists!';\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 13:\n            resData = _context.sent;\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyD480eQzY9RTRTmRSTBhSKYqQlmhmEJBKM', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                idToken: resData.idToken\n              })\n            }));\n\n          case 16:\n            user_response = _context.sent;\n            _context.next = 19;\n            return _regeneratorRuntime.awrap(user_response.json()[0]);\n\n          case 19:\n            res_user_data = _context.sent;\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn * 1000), res_user_data.displayName, res_user_data.email));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, resData, errorResData, errorId, message, expirationDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyD480eQzY9RTRTmRSTBhSKYqQlmhmEJBKM', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            resData = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 14;\n              break;\n            }\n\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 9:\n            errorResData = _context2.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong!';\n\n            if (errorId === 'EMAIL_NOT_FOUND') {\n              message = 'This email could not be found';\n            } else if (errorId === 'INVALID_PAsSWORD') {\n              message = 'This password is not valid!';\n            }\n\n            throw new Error(message);\n\n          case 14:\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn * 1000)));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logout = function logout() {\n  clearLogoutTimer();\n  AsyncStorage.removeItem('userData');\n  return {\n    type: LOGOUT\n  };\n};\n\nvar clearLogoutTimer = function clearLogoutTimer() {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nvar setLogoutTimer = function setLogoutTimer(expirationTime) {\n  return function (dispatch) {\n    timer = setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nvar saveDataToStorage = function saveDataToStorage(token, userId, expirationDate) {\n  AsyncStorage.setItem('userData', JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationDate.toISOString()\n  }));\n};","map":{"version":3,"sources":["/home/ash/Desktop/bro_app/store/actions/auth.js"],"names":["SIGNUP","LOGIN","AUTHENTICATE","LOGOUT","SET_DID_TRY_AUTO_LOGIN","timer","setDidTryAutoLogin","type","authenticate","userId","token","expiryTime","dispatch","setLogoutTimer","signup","email","password","fetch","method","headers","body","JSON","stringify","returnSecureToken","response","ok","json","errorResData","errorId","error","message","Error","resData","idToken","user_response","res_user_data","localId","parseInt","expiresIn","displayName","expirationDate","Date","getTime","saveDataToStorage","login","logout","clearLogoutTimer","AsyncStorage","removeItem","clearTimeout","expirationTime","setTimeout","setItem","expiryDate","toISOString"],"mappings":"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","sourcesContent":["import {AsyncStorage} from 'react-native';\r\n\r\nexport const SIGNUP = 'SIGNUP';\r\nexport const LOGIN = 'LOGIN';\r\nexport const AUTHENTICATE = 'AUTHENTICATE';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const SET_DID_TRY_AUTO_LOGIN = 'SET_DID_TRY_AUTO_LOGIN';\r\n\r\n\r\nlet timer;\r\n\r\n\r\nexport const setDidTryAutoLogin = () => {\r\n    return {\r\n        type: SET_DID_TRY_AUTO_LOGIN\r\n    };\r\n};\r\n\r\nexport const authenticate = (userId, token, expiryTime) => {\r\n    return dispatch => {\r\n        dispatch(setLogoutTimer(expiryTime));\r\n        dispatch({\r\n            type: AUTHENTICATE,\r\n            userId: userId,\r\n            token: token,\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const signup = (email, password) => {\r\n    return async dispatch => {\r\n        const response = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyD480eQzY9RTRTmRSTBhSKYqQlmhmEJBKM', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password,\r\n                returnSecureToken: true\r\n            })\r\n        });\r\n        if (!response.ok) {\r\n            const errorResData = await response.json();\r\n            const errorId = errorResData.error.message;\r\n            let message = 'Something went wrong!';\r\n            if (errorId === 'EMAIL_EXISTS') {\r\n                message = 'This email already exists!';\r\n            }\r\n            throw new Error(message);\r\n        }\r\n        const resData = await response.json();\r\n        const user_response = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyD480eQzY9RTRTmRSTBhSKYqQlmhmEJBKM', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({idToken: resData.idToken,})\r\n        });\r\n        const res_user_data = await user_response.json()[0];\r\n        dispatch(\r\n            authenticate(\r\n                resData.localId,\r\n                resData.idToken,\r\n                parseInt(resData.expiresIn * 1000),\r\n                res_user_data.displayName,\r\n                res_user_data.email,\r\n            ));\r\n        const expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\r\n        saveDataToStorage(resData.idToken, resData.localId, expirationDate);\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const login = (email, password) => {\r\n    return async dispatch => {\r\n        const response = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyD480eQzY9RTRTmRSTBhSKYqQlmhmEJBKM', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password,\r\n                returnSecureToken: true\r\n            })\r\n        });\r\n        const resData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            const errorResData = await response.json();\r\n            const errorId = errorResData.error.message;\r\n            let message = 'Something went wrong!';\r\n            if (errorId === 'EMAIL_NOT_FOUND') {\r\n                message = 'This email could not be found';\r\n            } else if (errorId === 'INVALID_PAsSWORD') {\r\n                message = 'This password is not valid!';\r\n            }\r\n            throw new Error(message);\r\n        }\r\n\r\n\r\n        dispatch(authenticate(\r\n            resData.localId,\r\n            resData.idToken,\r\n            parseInt(resData.expiresIn * 1000)));\r\n\r\n        const expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\r\n        saveDataToStorage(resData.idToken, resData.localId, expirationDate);\r\n    };\r\n};\r\n\r\n\r\nexport const logout = () => {\r\n    clearLogoutTimer();\r\n    AsyncStorage.removeItem('userData');\r\n    return {\r\n        type: LOGOUT\r\n    };\r\n}\r\n\r\nconst clearLogoutTimer = () => {\r\n    if (timer) {\r\n        clearTimeout(timer);\r\n    }\r\n};\r\n\r\nconst setLogoutTimer = expirationTime => {\r\n    return dispatch => {\r\n        timer = setTimeout(() => {\r\n            dispatch(logout());\r\n        }, expirationTime);\r\n    }\r\n}\r\n\r\n\r\nconst saveDataToStorage = (token, userId, expirationDate) => {\r\n    AsyncStorage.setItem('userData', JSON.stringify({\r\n        token: token,\r\n        userId: userId,\r\n        expiryDate: expirationDate.toISOString(),\r\n    }));\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}
